
import java.io.File;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author TheThoetha
 */
public class test extends javax.swing.JFrame {

    //directories to search
    static ArrayList<String> searchDirectoryList = new ArrayList<>();
    //file types to search for
    static ArrayList<String> searchExecutableList = new ArrayList<>();
    //files that match the filter
    static ArrayList<String> filteredExecutableList = new ArrayList<>();
    //files that are infected
    static ArrayList<String> infectedFilesList = new ArrayList<>();
    //file of virus signatures
    static ArrayList<String> signatureFileList = new ArrayList<>();



    /**
     * Creates new form SimpleGUI
     */
    public test() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("MSSP Virus Signature Scanner C012952A");

        for (int b = 0; b < searchDirectoryList.size(); b++) {
            directoryDisplay.append(searchDirectoryList.get(b) + "\n");
        }

        for (int c = 0; c < searchExecutableList.size(); c++) {
            executableFileDisplay.append(searchExecutableList.get(c) + " ");
        }
        
        for (int c = 0; c < signatureFileList.size(); c++) {
            signatureDisplay.append(signatureFileList.get(c) + "\n");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        optionsPanel = new javax.swing.JPanel();
        addExtensionButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        executableFileDisplay = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        addDirectoryButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        addExtensionField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        directoryDisplay = new javax.swing.JTextArea();
        resetDirectoriesButton = new javax.swing.JButton();
        resetExtensionsButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        signatureDisplay = new javax.swing.JTextArea();
        addSignatureButton = new javax.swing.JButton();
        resetSignatureButton = new javax.swing.JButton();
        scanButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        scanDisplayTextArea = new javax.swing.JTextArea();
        scanProgressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        optionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));

        addExtensionButton.setText("Add");
        addExtensionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addExtensionButtonActionPerformed(evt);
            }
        });

        executableFileDisplay.setEditable(false);
        executableFileDisplay.setColumns(20);
        executableFileDisplay.setLineWrap(true);
        executableFileDisplay.setRows(5);
        executableFileDisplay.setWrapStyleWord(true);
        jScrollPane1.setViewportView(executableFileDisplay);

        jLabel1.setText("Executable Criteria");

        addDirectoryButton.setText("Add");
        addDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDirectoryButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Search Criteria");

        addExtensionField.setText(".exe");
        addExtensionField.setMinimumSize(new java.awt.Dimension(6, 23));

        jLabel3.setText("Add Extension");

        directoryDisplay.setEditable(false);
        directoryDisplay.setColumns(20);
        directoryDisplay.setRows(5);
        jScrollPane3.setViewportView(directoryDisplay);

        resetDirectoriesButton.setText("Reset");
        resetDirectoriesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetDirectoriesButtonActionPerformed(evt);
            }
        });

        resetExtensionsButton.setText("Reset");
        resetExtensionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetExtensionsButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Virus Signature Files");

        signatureDisplay.setEditable(false);
        signatureDisplay.setColumns(20);
        signatureDisplay.setRows(5);
        jScrollPane4.setViewportView(signatureDisplay);

        addSignatureButton.setText("Add");
        addSignatureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSignatureButtonActionPerformed(evt);
            }
        });

        resetSignatureButton.setText("Reset");
        resetSignatureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetSignatureButtonActionPerformed(evt);
            }
        });

        scanButton.setText("Scan");
        scanButton.setFocusPainted(false);
        scanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(scanButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(optionsPanelLayout.createSequentialGroup()
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(addSignatureButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(resetSignatureButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(optionsPanelLayout.createSequentialGroup()
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(addDirectoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(resetDirectoriesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(optionsPanelLayout.createSequentialGroup()
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(addExtensionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(resetExtensionsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addExtensionField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionsPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addComponent(addSignatureButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetSignatureButton))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addComponent(addDirectoryButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetDirectoriesButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(optionsPanelLayout.createSequentialGroup()
                        .addComponent(addExtensionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetExtensionsButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(0, 0, 0)
                .addComponent(addExtensionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(scanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Results\n"));

        scanDisplayTextArea.setEditable(false);
        scanDisplayTextArea.setColumns(20);
        scanDisplayTextArea.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 13)); // NOI18N
        scanDisplayTextArea.setForeground(new java.awt.Color(153, 0, 0));
        scanDisplayTextArea.setRows(5);
        jScrollPane2.setViewportView(scanDisplayTextArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 649, Short.MAX_VALUE)
                    .addComponent(scanProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scanProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(optionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>                        

    private void scanButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        scanProgressBar.setValue(0);
        scanDisplayTextArea.setText(null);
        filteredExecutableList.clear();

        for (int a = 0; a < searchDirectoryList.size(); a++) {
            getExecutableFiles(searchDirectoryList.get(a));
        }

        scanProgressBar.setMaximum(filteredExecutableList.size());

        // HERERERER SCAN PROGRESS BAR 
        for (int a = 0; a < filteredExecutableList.size(); a++) {

            File executablefile = new File(filteredExecutableList.get(a));
            scanExecutableFile(executablefile);

            // fix progress bar
            scanProgressBar.setValue(a + 1);
        }
        if (infectedFilesList.isEmpty()) {
            scanDisplayTextArea.setForeground(new java.awt.Color(0, 153, 0));

            scanDisplayTextArea.setText("===============================================\n" + "       Scanning Complete: No Viruses Have Been Found" + "\n===============================================");

            JOptionPane.showMessageDialog(this,
                    "Scanning Complete: no viruses have been found.",
                    "Scan Complete",
                    JOptionPane.INFORMATION_MESSAGE);

        } else {
            String virusword = "virus has ";

            if (infectedFilesList.size() > 1) {
                virusword = "viruses have ";
            }

            scanDisplayTextArea.setForeground(new java.awt.Color(153, 0, 0));
            scanDisplayTextArea.setText("===============================================\n" + "       Scanning Complete: " + infectedFilesList.size() + " " + virusword + "Been Found" + "\n===============================================\n");

            // show all infected files 
            for (int a = 0; a < infectedFilesList.size(); a++) {
                scanDisplayTextArea.append(infectedFilesList.get(a) + "\n");
            }

            JOptionPane.showMessageDialog(this,
                    "Scanning Complete: " + infectedFilesList.size() + " " + virusword + "been found.",
                    "Scan Complete",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }                                          

    private void addExtensionButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:       
        boolean addExecutable = true;

        if (executableFileDisplay.getText().equalsIgnoreCase("No Exenstion Filter")) {
            executableFileDisplay.setText(null);
        }

        for (int b = 0; b < searchExecutableList.size(); b++) {

            String s2 = searchExecutableList.get(b);
            String s1 = addExtensionField.getText();

            if (s2.equalsIgnoreCase(s1)) {
                addExecutable = false;
            }
        }

        if (addExecutable) {
            searchExecutableList.add(addExtensionField.getText());
            executableFileDisplay.append(addExtensionField.getText() + " ");
        } else {
            JOptionPane.showMessageDialog(this,
                    "The extension " + addExtensionField.getText() + " already exsists in the executable criteria.",
                    "Executable Criteria Error",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }                                                  

    private void addDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:
        boolean addDirectory = true;

        

        File f = null;

        JFileChooser chooser = new JFileChooser();        
        chooser.setDialogTitle("Add Directory");
        chooser.setApproveButtonText("Add");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

                
        int returnVal = chooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //filter to only blah blah files 
            f = chooser.getSelectedFile();

            for (int b = 0; b < searchDirectoryList.size(); b++) {

            String s2 = searchDirectoryList.get(b);
            String s1 = f.getAbsolutePath();

            if (s2.equalsIgnoreCase(s1)) {
                addDirectory = false;
            }
        }
        }
        if (addDirectory) {
            if (directoryDisplay.getText().equalsIgnoreCase("No Directories Specified")) {
            directoryDisplay.setText(null);
        }
            searchDirectoryList.add(f.getAbsolutePath());
            directoryDisplay.append(f.getAbsolutePath() + "\n");
            
        } else {
            JOptionPane.showMessageDialog(this,
                    "The Direcorty " + f.getAbsolutePath() + " already exsists in the search criteria.",
                    "Search Criteria Error",
                    JOptionPane.INFORMATION_MESSAGE);
        }
        
        
        
    }                                                  

    private void resetDirectoriesButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        // TODO add your handling code here:
        directoryDisplay.setText("No Directories Specified");
        searchDirectoryList.clear();
    }                                                      

    private void resetExtensionsButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        // TODO add your handling code here:
        executableFileDisplay.setText("No Exenstion Filter");
        searchExecutableList.clear();
    }                                                     

    private void resetSignatureButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        // TODO add your handling code here:
        signatureDisplay.setText("No Signature File Specified");
        signatureFileList.clear();
    }                                                    

    private void addSignatureButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:

        boolean addSignateFile = true;
        File f = null;

        JFileChooser chooser = new JFileChooser();        
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Signature Files", "txt", "text");
        chooser.setFileFilter(filter);
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setDialogTitle("Add Virus Signature File");
        chooser.setApproveButtonText("Add");
                
        int returnVal = chooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //filter to only blah blah files 
            f = chooser.getSelectedFile();

            for (int b = 0; b < signatureFileList.size(); b++) {

                String s2 = signatureFileList.get(b);
                String s1 = f.getAbsolutePath();

                if (s2.equalsIgnoreCase(s1)) {
                    addSignateFile = false;

                }
            }
        }

        // validation 
        if (addSignateFile) {
                if (signatureDisplay.getText().equalsIgnoreCase("No Signature File Specified")) {
            signatureDisplay.setText(null);
        }
            signatureDisplay.append(f.getAbsolutePath() + "\n");
            signatureFileList.add(f.getAbsolutePath());
        } else {
            JOptionPane.showMessageDialog(this,
                    "The file " + f.getAbsolutePath() + " already exsists in the virus signature files list.",
                    "Virus Signature File Error",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }                                                  

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new test().setVisible(true);
            }
        });

        String path = "C:\\Test";
        searchDirectoryList.add(path);
        String path1 = "C:\\Test";
        searchDirectoryList.add(path1);

        String extension1 = ".exe";
        searchExecutableList.add(extension1);
        String extension2 = ".bat";
        searchExecutableList.add(extension2);
        String extension3 = ".com";
        searchExecutableList.add(extension3);
        String extension4 = ".scr";
        searchExecutableList.add(extension4);
        String extension5 = ".pif";
        searchExecutableList.add(extension5);

        String test1 = "ASDAJDDASDHDSAHDKADAHSKJDSAH";
        infectedFilesList.add(test1);
        
        String test21 = "C:\\Text\\Signatures.txt";
        signatureFileList.add(test21);

    }

    public static void getExecutableFiles(String specifiedDirectory) {

        String files;
        File directory = new File(specifiedDirectory);
        File[] allFileList = directory.listFiles();
        
        
        
        for (File allFileList1 : allFileList) {
            if (!searchExecutableList.isEmpty()) {
                if (allFileList1.isFile()) {
                    files = allFileList1.getName();
                    for (int b = 0; b < searchExecutableList.size(); b++) {
                        if (files.endsWith(searchExecutableList.get(b).toLowerCase()) || files.endsWith(searchExecutableList.get(b).toUpperCase())) {
                            filteredExecutableList.add(allFileList1.getAbsolutePath());
                            //scan it  
                        }
                    }
                } else if (allFileList1.isDirectory()) {
                    getExecutableFiles(allFileList1.getAbsolutePath());
                }
            } else {
                if (allFileList1.isFile()) {
                    filteredExecutableList.add(allFileList1.getAbsolutePath());
                    //scan it then
                } else if (allFileList1.isDirectory()) {
                    getExecutableFiles(allFileList1.getAbsolutePath());
                }
            }
        }
    }

    public static void scanExecutableFile(File specifiedFile) {

    }


    // Variables declaration - do not modify                     
    private javax.swing.JButton addDirectoryButton;
    private javax.swing.JButton addExtensionButton;
    private javax.swing.JTextField addExtensionField;
    private javax.swing.JButton addSignatureButton;
    private static javax.swing.JTextArea directoryDisplay;
    private javax.swing.JTextArea executableFileDisplay;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JButton resetDirectoriesButton;
    private javax.swing.JButton resetExtensionsButton;
    private javax.swing.JButton resetSignatureButton;
    private javax.swing.JButton scanButton;
    private static javax.swing.JTextArea scanDisplayTextArea;
    private static javax.swing.JProgressBar scanProgressBar;
    private javax.swing.JTextArea signatureDisplay;
    // End of variables declaration                   
}
