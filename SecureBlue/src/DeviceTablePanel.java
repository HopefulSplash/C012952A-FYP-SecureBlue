
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author TheThoetha
 */
public class DeviceTablePanel extends java.awt.Panel {

    /**
     * Creates new form NewPanel
     */
    public DeviceTablePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        deviceTableScrollPane = new javax.swing.JScrollPane();
        deviceTable = new javax.swing.JTable();
        jSpinner1 = new javax.swing.JSpinner();

        setMaximumSize(new java.awt.Dimension(445, 406));
        setMinimumSize(new java.awt.Dimension(445, 406));
        setPreferredSize(new java.awt.Dimension(445, 406));

        deviceTableScrollPane.setBackground(new java.awt.Color(255, 255, 255));
        deviceTableScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        deviceTableScrollPane.setHorizontalScrollBar(null);

        deviceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null}
            },
            new String [] {
                "Discovered Device Details"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        deviceTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        deviceTable.setRowHeight(40);
        deviceTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        deviceTableScrollPane.setViewportView(deviceTable);
        deviceTable.getColumnModel().getColumn(0).setCellRenderer(new ImageRenderer());
        deviceTable.getTableHeader().setReorderingAllowed(false);
        deviceTableScrollPane.getViewport().setBackground(Color.WHITE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(deviceTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(deviceTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTable deviceTable;
    private javax.swing.JScrollPane deviceTableScrollPane;
    private javax.swing.JSpinner jSpinner1;
    // End of variables declaration//GEN-END:variables
}

  class ImageRenderer extends DefaultTableCellRenderer {

        //validation 
        ImageIcon icon = new ImageIcon(getClass().getResource("ICON.png"));
        Image img = icon.getImage();
        Image newimg = img.getScaledInstance(20, 20, java.awt.Image.SCALE_SMOOTH);
        ImageIcon newIcon = new ImageIcon(newimg);

        public ImageRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {

            if (isSelected) {
                setForeground(table.getSelectionForeground());
                setBackground(table.getSelectionBackground());
            } else {
                setForeground(table.getForeground());
                setBackground(UIManager.getColor(Color.WHITE));
            }

            //if (table.getValueAt(row, column).toString().contains(" Device(s) Found")) {
              //  setText((String) table.getValueAt(row, column));
                //setIcon(null);

                //setHorizontalTextPosition(SwingConstants.CENTER);
                //setVerticalTextPosition(SwingConstants.CENTER);
            //} else {
                setText((String) table.getValueAt(row, column));
                setIcon(newIcon);
                setHorizontalTextPosition(SwingConstants.RIGHT);
                setVerticalTextPosition(SwingConstants.CENTER);
                setHorizontalAlignment(SwingConstants.LEFT);
                setVerticalAlignment(SwingConstants.CENTER);
           // }
            return this;
        }

    }
